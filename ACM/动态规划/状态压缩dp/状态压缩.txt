农夫FJ有一块n行m列的矩形土地， 有的土地是肥沃的，可以在这些土地上放牛（用1表示），
有的土地不能放牛（用0表示），而且相邻的可以放牛的格子不能同时有牛，
问FJ一共有多少种放牛的方案（一头牛都不放也是一种方案）。

import java.util.Scanner;
public class Main {
	private static boolean okWithMap(int now, int land) {// 和当前行的草坪分布相容
		return (now | land) == land && ((now << 1) & now) == 0;
	}
	private static boolean okWithPreLine(int now, int pre) {// 和前面的奶牛分布相容
		return (now & pre) == 0;
	}
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int row = scanner.nextInt();
		int col = scanner.nextInt();
		int[] map = new int[row];// 每一行用二进制串表示
		int upper = (1 << col) - 1;
		for(int i = 0; i < row; ++i) {
			int r = 0;
			for(int j = 0; j < col; ++j) {
				int e = scanner.nextInt();
				r = r << 1;
				if(e == 1) {
					r += e;
				}
			}
			map[i] = r;
		}
		int[][] dp = new int[row][upper + 1];// dp[i][j]表示前i行摆放方式为j的情况下的总摆放方式
		// j方式和第i行的map不相容     dp[i][j] = 0
		// j方式和第i行的map相容         dp[i][j] = sum(dp[i-1][k])，其中k与j相容
		for(int j = 0; j <= upper; ++j) {// 初始化第一行
			if(okWithMap(j, map[0])) {
				dp[0][j] = 1;
			}
		}
		// 开始dp
		for(int i = 1; i < row; ++i) {
			for(int j = 0; j <= upper; ++j) {
				if(okWithMap(j, map[i])) {
					for(int k = 0; k <= upper; ++k) {
						if(okWithPreLine(j, k)) dp[i][j] += dp[i-1][k];
					}
				}
			}
		}
		int result = 0;
		for(int j = 0; j <= upper; ++j) {
			result = (result + dp[row - 1][j]) % 100000000;
		}
		System.out.println(result);
		scanner.close();
	}
}