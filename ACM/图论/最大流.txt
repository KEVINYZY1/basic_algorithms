public class FordFulkerson {
	private int[][] rGraph;

	private boolean findAugmentPath(int begin, int end, int[] path) {// 根据bfs寻找增广路径，path[i]记录节点i在路径上的父节点
		Queue<Integer> queue = new LinkedList<Integer>();
		boolean[] visit = new boolean[rGraph.length];// 记录每个节点是否已经访问过
		// 初始化起点
		visit[begin] = true;
		queue.offer(begin);
		path[begin] = -1;
		while (!queue.isEmpty()) {
			int now = queue.poll();
			if (now == end) {
				return true;// 找到了一条增广路径
			}
			for (int j = 0; j < rGraph.length; ++j) {
				if (rGraph[now][j] > 0 && !visit[j]) {
					visit[j] = true;
					queue.offer(j);
					path[j] = now;
				}
			}
		}
		return false;
	}

	private void modifyGraph(int[] path, int begin, int end, int delta) {
		int now = end;
		while (now != begin) {
			int pre = path[now];
			rGraph[pre][now] -= delta;
			rGraph[now][pre] += delta;
			now = pre;
		}
	}

	public int maxFlow(int[][] graph, int begin, int end) {// graph是邻接矩阵
		rGraph = graph;
		int maxFlow = 0;
		int[] path;
		while (findAugmentPath(begin, end, path = new int[graph.length])) {
			// 计算找到的增广路径的容量
			int delta = Integer.MAX_VALUE;
			for (int i = end; i != begin; i = path[i]) {
				delta = Math.min(delta, rGraph[path[i]][i]);
			}
			maxFlow += delta;
			modifyGraph(path, begin, end, delta);
		}
		return maxFlow;
	}
}