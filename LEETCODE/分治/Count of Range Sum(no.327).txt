Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.
Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive.

Note:
A naive algorithm of O(n2) is trivial. You MUST do better than that.

Example:
Given nums = [-2, 5, -1], lower = -2, upper = 2,
Return 3.
The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.

public class Solution {
	private int result = 0;

	private void mergeSort(long[] sums, int begin, int end, int lower, int upper) {// 程序基于归并排序
		if (begin < end) {// 递归
			int mid = (begin + end) / 2;
			mergeSort(sums, mid + 1, end, lower, upper);// mid+1~end部分进行排序
			mergeSort(sums, begin, mid, lower, upper);// begin~mid部分进行排序
			for (int i = begin; i <= mid; ++i) {// 对begin~mid部分的每个元素A，在mid+1~end部分用二分法找到B和C，保证
				// B是B>=lower+A的最小一个，C是C<=upper+A的最大的一个
				long A = sums[i];
				int Bidx = findBidx(sums, mid + 1, end, lower + A);
				int Cidx = findCidx(sums, mid + 1, end, upper + A);
				if (Bidx != -1 && Cidx != -1) {
					result += (Cidx - Bidx + 1);
				}
			}
			// 两部分进行归并
			long[] temp = new long[end - begin + 1];
			int leftIdx = begin, rightIdx = mid + 1, i = 0, j = begin;
			while (leftIdx <= mid && rightIdx <= end) {
				if (sums[leftIdx] > sums[rightIdx]) {
					temp[i] = sums[rightIdx];
					++rightIdx;
				} else {
					temp[i] = sums[leftIdx];
					++leftIdx;
				}
				++i;
			}
			while (leftIdx <= mid) {
				temp[i] = sums[leftIdx];
				++i;
				++leftIdx;
			}
			while (rightIdx <= end) {
				temp[i] = sums[rightIdx];
				++i;
				++rightIdx;
			}
			for (i = 0, j = begin; i < temp.length; ++i, ++j) {// 把temp[]中的数据写回sums[]
				sums[j] = temp[i];
			}
		}
	}

	private int findBidx(long[] sums, int begin, int end, long num) {// 二分查找大于等于num的第一个元素
		int high = end;
		int low = begin;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (sums[mid] == num) {
				low = mid;
				break;
			} else if (sums[mid] < num) {
				low = mid + 1;
			} else if (sums[mid] > num) {
				high = mid - 1;
			}
		}
		if (low > end)
			return -1;// 不存在
		// 考虑到有相同的元素情况，返回最左边那个
		while (low - 1 >= begin && sums[low - 1] == sums[low]) {
			--low;
		}
		return low;
	}

	private int findCidx(long[] sums, int begin, int end, long num) {// 二分查找小于等于key的第一个元素
		int high = end;
		int low = begin;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (sums[mid] == num) {
				high = mid;
				break;
			} else if (sums[mid] < num) {
				low = mid + 1;
			} else if (sums[mid] > num) {
				high = mid - 1;
			}
		}
		if (high < begin)
			return -1;// 不存在
		// 考虑到有相同的元素情况，返回最右边那个
		while (high + 1 <= end && sums[high + 1] == sums[high]) {
			++high;
		}
		return high;
	}

	public int countRangeSum(int[] nums, int lower, int upper) {
		long[] sums = new long[nums.length];// sums[i]存储nums[0] ~ nums[i]的sum
		for (int i = 0; i < nums.length; ++i) {// 计算累积和
			if (i == 0) {
				sums[i] = nums[i];
			} else {
				sums[i] = sums[i - 1] + nums[i];
			}
		}
		mergeSort(sums, 0, nums.length - 1, lower, upper);
		// 补漏
		int A = 0;
		int Bidx = findBidx(sums, 0, nums.length - 1, lower);
		int Cidx = findCidx(sums, 0, nums.length - 1, upper);
		if (Bidx != -1 && Cidx != -1) {
			result += (Cidx - Bidx + 1);
		}
		return result;
	}
}