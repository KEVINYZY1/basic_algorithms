/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class MyComparator implements Comparator<ListNode> {
	public int compare(ListNode node1, ListNode node2) {
		if (node1.val > node2.val) {
			return 1;
		} else if (node1.val == node2.val) {
			return 0;
		} else {
			return -1;
		}
	}
}

public class Solution {
	public ListNode mergeKLists(ListNode[] lists) {
		// 构建一个小根堆
		PriorityQueue<ListNode> minHeap = new PriorityQueue(11, new MyComparator());
		ListNode resultHead = null;
		ListNode resultPtr = null;
		for (int i = 0; i < lists.length; ++i) {
			if (lists[i] != null)
				minHeap.offer(lists[i]);
		} // 初始化小根堆

		while (!minHeap.isEmpty()) {
			ListNode node = minHeap.poll();// 选出小根堆里面最小的
			if (node.next != null)
				minHeap.offer(node.next);
			if (resultHead == null) {
				resultHead = node;
				resultPtr = node;
			} else {
				resultPtr.next = node;
				resultPtr = node;
			}
		}
		return resultHead;
	}
}