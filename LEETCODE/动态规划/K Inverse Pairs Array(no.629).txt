Given two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.

We define an inverse pair as following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.

Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.
Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: 
The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.
Note:
The integer n is in the range [1, 1000] and k is in the range [0, 1000].


// 思路:dp[n][k]表示数组中存储1~n这n个数字的时候，有k个逆序对的情况的数组数目
// dp[n][k]可以这样构造出来：
// 考虑当前数组Arr(n-1)中存放的是1~n-1这n-1个数字，有k个逆序对。
// 数字n如果放在Arr(n-1)的末尾，那么新加入的n不会引入逆序对，k个逆序对全部出现在之前的Arr(n-1)这个数组中
// 数字n如果插入Arr(n-1)的倒数第2位置，那么会引入一个逆序对，剩下的k-1个逆序全部出现在之前的Arr(n-1)这个数组中
// 依次类推，我们可以得到这样的表达式(假如出现下标为负数的情况，对应的dp[][]为0)：当n > 2时下面的式子满足
// dp[n][k] = dp[n-1][k] + dp[n-1][k-1] + dp[n-1][k-2] + ... + dp[n-1][k-(n-1)]
// dp[n][k+1] = dp[n-1][k+1] + dp[n-1][k] + dp[n-1][k-1] + ... + dp[n-1][k+1-(n-1)]
// 两式相减，可以得到
// dp[n][k+1] = dp[n][k] + dp[n-1][k+1] - dp[n-1][k-(n-1)]
public class Solution {
    public int kInversePairs(int n, int k) {
        int maxReversePair = n * (n - 1) / 2;
        if(k < 0 || k > maxReversePair) {
            return 0;
        } else if(k == 0 || k == maxReversePair) {
            return 1;
        } else {
            long[][] dp = new long[n + 1][k + 1];
            for(int i = 1; i <= n; ++i) {// 初始化第0列
                dp[i][0] = 1;
            }
            dp[2][1] = 1;// 初始化n = 2的情形（递推公式适用于n > 2的情形）
            for(int i = 3; i <= n; ++i) {
                for(int j = 1; j <= Math.min(k, i * (i - 1) / 2); ++j) {
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                    if(j - i >= 0) {
                        dp[i][j] -= dp[i-1][j - i];
                    }
                    dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
                }
            }
            return (int)dp[n][k];
        }
    }
}
