Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

// 状态转移公式 ：dp[i][j]表示s的 0~j子串在t的0~i子串中出现的次数
// dp[i][j] = dp[i-1][j] + dp[i-1][j-1] * 1      t(i)==s(j)
// dp[i][j] = dp[i-1][j]                         t(i)!=s(j)
public class Solution {
	public int numDistinct(String t, String s) {
		if (t.length() == 0)
			return 0;
		// dp[i][j]表示t[0~i]中包含s[0~j]的次数
		int[][] dp = new int[t.length()][s.length()];

		dp[0][0] = s.charAt(0) == t.charAt(0) ? 1 : 0;
		for (int i = 1; i < t.length(); ++i) {// 初始化dp[][]第一列
			if (s.charAt(0) == t.charAt(i)) {
				dp[i][0] = dp[i - 1][0] + 1;
			} else {
				dp[i][0] = dp[i - 1][0];
			}
		}
		for (int i = 1; i < t.length(); ++i) {
			for (int j = 1; j < s.length() && j <= i; ++j) {
				if (t.charAt(i) == s.charAt(j)) {
					dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
				} else {
					dp[i][j] = dp[i - 1][j];
				}
			}
		}
		return dp[t.length() - 1][s.length() - 1];
	}
}