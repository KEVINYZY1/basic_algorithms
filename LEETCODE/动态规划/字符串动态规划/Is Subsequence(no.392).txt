// 状态转移公式：dp[i][j]表示s的0~i是t的0~j的子串
// dp[i][j] = dp[i][j-1] || dp[i-1][j-1]   s(i)==t(j)
// dp[i][j] = dp[i][j-1]                   s(i)!=t(j)
public class Solution {// 内存会超
	public boolean isSubsequence(String s, String t) {
		if (s.length() == 0)
			return true;
		if (s.length() > t.length())
			return false;
		boolean[][] dp = new boolean[s.length()][t.length()];
		for (int j = 0; j < t.length(); ++j) {
			if (j == 0) {
				dp[0][j] = s.charAt(0) == t.charAt(0);
			} else {
				dp[0][j] = dp[0][j - 1] || s.charAt(0) == t.charAt(j);
			}
		}// 初始化dp的第一行
		for (int i = 1; i < s.length(); ++i) {
			for (int j = i; j < t.length(); ++j) {
				if(s.charAt(i) == t.charAt(j)) {
					dp[i][j] = dp[i][j-1] || dp[i-1][j-1];
				} else {
					dp[i][j] = dp[i][j-1];
				}
			}
		}
		return dp[s.length() - 1][t.length() - 1];
	}
}

public class Solution {// 正确的做法
	public boolean isSubsequence(String s, String t) {
		int sIdx = 0;
		int tIdx = 0;
		while (sIdx < s.length() && tIdx < t.length()) {
			if (s.charAt(sIdx) == t.charAt(tIdx)) {
				++sIdx;
				++tIdx;
			} else {
				++tIdx;
			}
		}
		if (sIdx < s.length())
			return false;
		return true;
	}
}