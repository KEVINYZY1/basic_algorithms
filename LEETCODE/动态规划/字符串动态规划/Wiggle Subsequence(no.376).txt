A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.

For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.

Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.

// 状态转移公式：dp[i]表示以i结尾的最长wiggle子串长度，
// dif[i]表示以i结尾的最长wiggle子串最后两个数之差是1（正），-1（负），0（子串长度为1的情况）
// 依次执行下面的几部
// dp[i] = 1
// 遍历 j = 0~i-1，如果dif[j]=1&&nums[i]<nums[j] || dif[j]=-1&&nums[i]>nums[j] || dif[j]=0&&nums[i]!=nums[j]，则dp[i]=max(dp[i], dp[j]+1)
public class Solution {
	public int wiggleMaxLength(int[] nums) {
		int result = 0;
		int[] dp = new int[nums.length];
		int[] dif = new int[nums.length];
		dp[0] = 1;
		dif[0] = 0;
		for (int i = 1; i < nums.length; ++i) {
			dp[i] = 1;
			for (int j = 0; j < i; ++j) {
				if (dif[j] == 1 && nums[i] < nums[j]) {
					dp[i] = Math.max(dp[i], dp[j] + 1);
					dif[i] = -1;
				} else if (dif[j] == -1 && nums[i] > nums[j]) {
					dp[i] = Math.max(dp[i], dp[j] + 1);
					dif[i] = 1;
				} else if (dif[j] == 0 && nums[i] != nums[j]) {
					dp[i] = Math.max(dp[i], dp[j] + 1);
					if (nums[i] > nums[j])
						dif[i] = 1;
					else
						dif[i] = -1;
				}
			}
			if (dp[i] == 1)
				dif[i] = 0;
			result = Math.max(result, dp[i]);
		}
		return result;
	}
}