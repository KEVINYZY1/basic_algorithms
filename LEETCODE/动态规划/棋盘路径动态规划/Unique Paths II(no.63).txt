// 状态转移公式：dp[i][j]表示到达(i,j)可以走的路径数目
// (i,j)是障碍物， 则dp[i][j] = 0
// (i,j)不是障碍物，则dp[i][j] = dp[i-1][j] + dp[i][j-1]
public class Solution {
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
		dp[0][0] = obstacleGrid[0][0] == 1 ? 0 : 1;
		for (int j = 1; j < obstacleGrid[0].length; ++j) {// 初始化第一排
			if (obstacleGrid[0][j] == 1) {
				dp[0][j] = 0;
			} else {
				dp[0][j] = dp[0][j - 1];
			}
		}
		for (int i = 1; i < obstacleGrid.length; ++i) {// 初始化第一列
			if (obstacleGrid[i][0] == 1) {
				dp[i][0] = 0;
			} else {
				dp[i][0] = dp[i - 1][0];
			}
		}
		for (int i = 1; i < obstacleGrid.length; ++i) {
			for (int j = 1; j < obstacleGrid[0].length; ++j) {
				if (obstacleGrid[i][j] == 1) {
					dp[i][j] = 0;
				} else {
					dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
				}
			}
		}
		return dp[obstacleGrid.length - 1][obstacleGrid[0].length - 1];
	}
}