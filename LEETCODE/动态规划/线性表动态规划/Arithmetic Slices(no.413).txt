A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequence:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.
A slice (P, Q) of array A is called arithmetic if the sequence:
A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.
The function should return the number of arithmetic slices in the array A.

Example:
A = [1, 2, 3, 4]
return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself

// 状态转移公式 dp[i]记录以i下标元素结尾的等差数列子串的个数，dif[i]表示以i下标元素结尾的等差数列的公差
// 子串长度要求至少为3
// A[i] - A[i-1] == dif[i-1]: dp[i] = dp[i-1] + 1  dif[i] = dif[i-1]
// A[i] - A[i-1] != dif[i-1]: dp[i] = 0            dif[i] = A[i] - A[i-1]
public class Solution {
	public int numberOfArithmeticSlices(int[] A) {
		if (A.length < 3)
			return 0;
		int[] dp = new int[A.length];
		int[] dif = new int[A.length];
		dp[1] = 0;
		dif[1] = A[1] - A[0];
		for (int i = 2; i < A.length; ++i) {
			if (A[i] - A[i - 1] == dif[i - 1]) {
				dp[i] = dp[i - 1] + 1;
				dif[i] = dif[i - 1];
			} else {
				dp[i] = 0;// 这保证了子串长度要求至少为3
				dif[i] = A[i] - A[i - 1];
			}
		}
		int counter = 0;
		for (int i = 2; i < A.length; ++i) {
			counter += dp[i];
		}
		return counter;
	}
}