// 状态转移公式：
// dp1[i]记录nums[i-1]偷的情况下nums[i-1]为止所能偷得最大值，dp2[i]记录nums[i-1]不偷的情况下nums[i-1]为止所能偷得最大值
// dp1[i] = nums[i] + dp2[i - 1]
// dp2[i] = max(dp1[i-1], dp2[i-1])
// 最终结果是dp1[nums.length - 1], dp2[nums.length - 1]中最大的
public class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0) return 0;
        int[] dp1 = new int[nums.length];// dp1[i]记录nums[i-1]偷的情况下nums[i-1]为止所能偷得最大值
        int[] dp2 = new int[nums.length];// dp2[i]记录nums[i-1]不偷的情况下nums[i-1]为止所能偷得最大值
        
        dp1[0] = nums[0];
        dp2[0] = 0;
        
        for (int i = 1; i < nums.length; ++i) {
            dp1[i] = nums[i] + dp2[i - 1];
            dp2[i] = Math.max(dp1[i - 1], dp2[i - 1]);
        }
        return Math.max(dp1[nums.length - 1], dp2[nums.length - 1]);
    }
}
// 对于把房子数组变成一个环形（数组的首尾是相邻的）
// 方法是把nums的开头元素添加到nums的结尾处，尝试偷窃nums开头和结尾；不偷窃nums开头和结尾两种情况，然后统计出结果最大的情况