// 状态转移公式：dp1[i]表示0～i区间最大值，dp2[i] = true表示0~i区间达到最大值的时候i号住户被偷了
// dp2[i-1] = true:  dp1[i] = max(dp1[i-1], dp1[i-2]+nums[i]); 并根据dp1[i]的选取方式更新dp2[i]
// dp2[i-1] = false: dp1[i] = dp1[i-1]+nums[i]; dp2[i] = true;
public class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0) return 0;
        boolean[] dp1 = new boolean[nums.length + 1];// dp1[i]记录nums[i-1]是否偷了
        int[] dp2 = new int[nums.length + 1];// dp2[i]记录nums[i-1]为止所能偷得最大值
        
        dp1[0] = false;
        dp2[0] = 0;
        dp1[1] = true;
        dp2[1] = nums[0];
        
        for (int i = 2; i <= nums.length; ++i) {
            if (dp1[i - 1]) {// 之前的住家偷了
                if (dp2[i - 2] + nums[i - 1] > dp2[i - 1]) {
                    dp1[i] = true;
                    dp2[i] = dp2[i - 2] + nums[i - 1];
                } else {
                    dp1[i] = false;
                    dp2[i] = dp2[i - 1];
                }
            } else {// 之前的住家没有偷
                dp1[i] = true;
                dp2[i] = dp2[i - 1] + nums[i - 1];
            }
        }
        return dp2[nums.length];
    }
}
// 对于把房子数组变成一个环形（数组的首尾是相邻的）
// 方法是把nums的开头元素添加到nums的结尾处，尝试偷窃nums开头和结尾；不偷窃nums开头和结尾两种情况，然后统计出结果最大的情况