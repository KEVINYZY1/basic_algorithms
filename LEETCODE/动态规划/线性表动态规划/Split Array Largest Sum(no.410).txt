Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.


public class Solution {
    // dp[i][j]表示nums前i个分成j组的最大分组的最小值
    // dp[i][j] = min{max(dp[k][j-1], nums[k+1,i])} k<i
    // dp数组中只有左下半部分的数字是有效的
    public int splitArray(int[] nums, int m) {
        int[][] dp = new int[nums.length][m + 1];
        // sums[i]存放累积和nums[0~i]
        int[] sums = new int[nums.length];
        sums[0] = nums[0];
        for(int i=1; i<nums.length; ++i) {
            sums[i] = sums[i-1] + nums[i];
        }
        
        // 初始化第一列
        for(int i=0; i < nums.length; ++i) {
            dp[i][1] = sums[i];
        }
        
        for(int i = 1; i < nums.length; ++i) {
            for(int j = 2; j <= i + 1 && j <= m; ++j) {
                int min = Integer.MAX_VALUE;
                for(int k = 0; k < i; ++k) {
                    min = Math.min(Math.max(dp[k][j - 1], sums[i] - sums[k]), min);
                }
                dp[i][j] = min;
            }
        }
        
        return dp[nums.length - 1][m];
    }
}