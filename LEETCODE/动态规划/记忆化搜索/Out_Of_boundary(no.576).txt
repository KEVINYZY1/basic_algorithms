There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.

public class Solution {
    private int[][][] dp;// dp[i][j][k]表示已(i,j)结尾，已走的路径长度为k的状态之后的可能情况数，状态由(i,j,k)唯一确定
    private int M = 1000000007;
    private int dfs(int i, int j, int N, int pathLength, int m, int n) {
        if (i == -1 || i == m || j == -1 || j == n)// 到达了边界之外
            return 1;
        if (pathLength == N)// 路径长度耗尽也没有走到边界之外
            return 0;
        if (dp[i][j][pathLength] == -1) {// 这种状态还没有经历过
            int up = dfs(i - 1, j, N, pathLength + 1, m, n);
            int down = dfs(i + 1, j, N, pathLength + 1, m, n);
            int right = dfs(i, j + 1, N, pathLength + 1, m, n);
            int left = dfs(i, j - 1, N, pathLength + 1, m, n);
            dp[i][j][pathLength] = ((up + down) % M + (right + left) % M) % M;
        }
        return dp[i][j][pathLength];
    }
    public int findPaths(int m, int n, int N, int x, int y) {
        dp = new int[m][n][N + 1];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k <= N; ++k) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return dfs(x, y, N, 0, m, n);
    }
}