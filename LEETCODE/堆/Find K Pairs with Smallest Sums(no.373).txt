You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.
Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

class MyComparator implements Comparator<int[]> {
	public int compare(int[] o1, int[] o2) {
		if (o1[0]+o1[1] < o2[0]+o2[1]) {
			return 1;
		} else if (o1[0]+o1[1] == o2[0]+o2[1]) {
			return 0;
		} else {
			return -1;
		}
	}
}
public class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        // 构建一个大根堆
        PriorityQueue<int[]> maxHeap = new PriorityQueue(11, new MyComparator());
        boolean finish = false;
        for(int i=0; i<nums1.length && !finish; ++i) {
        	for(int j=0; j<nums2.length && !finish; ++j) {
        		int[] pair = new int[2];
        		pair[0] = nums1[i];
        		pair[1] = nums2[j];
        		if(maxHeap.size() == k) {
        			int[] maxInHeap = maxHeap.peek();
        			int max = maxInHeap[0] + maxInHeap[1];
        			if(max > pair[0] + pair[1]) {// 堆顶元素比新的pair大
        				maxHeap.poll();
        				maxHeap.offer(pair);
        			} else {// 堆顶元素没有新的pair大
        				if(j == 0) {// 优化
        					finish = true;
        				}
        			}
        		} else {
        			maxHeap.offer(pair);
        		}
        	}
        }
        List<int[]> results = new ArrayList<int[]>();
        while(!maxHeap.isEmpty()) {
        	results.add(maxHeap.poll());
        }
        return results;
    }
}