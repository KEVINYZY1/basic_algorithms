public class Solution {
	private int counter = 0;

	private boolean check(int[][] board, int row, int col) {
		int i, j;
		// 检查上方
		for (i = row - 1; i >= 0; --i) {
			if (board[i][col] == 1) {
				return false;
			}
		}
		// 检查左上
		for (i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {
			if (board[i][j] == 1) {
				return false;
			}
		}
		// 检查右上
		for (i = row - 1, j = col + 1; i >= 0 && j < board[0].length; --i, ++j) {
			if (board[i][j] == 1) {
				return false;
			}
		}
		return true;
	}

	private void dfs(int[][] board, int lineIdx) {
		if (lineIdx == board.length) {
			++counter;
		} else {
			for (int i = 0; i < board[0].length; ++i) {
				if (check(board, lineIdx, i)) {// 这个位置可以放置皇后
					board[lineIdx][i] = 1;// 防止皇后
					dfs(board, lineIdx + 1);
					board[lineIdx][i] = 0;// 撤销本次放置的皇后
				}
			}
		}
	}

	public int totalNQueens(int n) {
		int[][] board = new int[n][n];
		dfs(board, 0);
		return counter;
	}
}