Given a collection of numbers that might contain duplicates, return all possible unique permutations.
For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

// 方法一 很慢
public class Solution {
	private List<List<Integer>> results = new ArrayList<List<Integer>>();
	private Set<String> hashSet = new HashSet<String>();// 用于去重

	private void dfs(int[] nums, boolean[] used, List<Integer> path, StringBuffer key) {
		if (path.size() == nums.length && !hashSet.contains(key.toString())) {
			List<Integer> result = new ArrayList<Integer>();
			for (int num : path) {
				result.add(num);
			}
			results.add(result);
			hashSet.add(key.toString());
		} else {
			for (int i = 0; i < nums.length; ++i) {
				if (!used[i]) {
					int oldLength = key.length();
					used[i] = true;
					path.add(nums[i]);
					key.append(nums[i]);

					dfs(nums, used, path, key);

					key.delete(oldLength, key.length());
					path.remove(path.size() - 1);
					used[i] = false;
				}
			}
		}
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
		boolean[] used = new boolean[nums.length];
		List<Integer> path = new ArrayList<Integer>();
		StringBuffer key = new StringBuffer();
		dfs(nums, used, path, key);
		return results;
	}
}

// 方法二 很快
public class Solution {
	private List<List<Integer>> results = new ArrayList<List<Integer>>();

	private void dfs(int[] nums, boolean[] used, List<Integer> path) {
		if (path.size() == nums.length) {
			List<Integer> result = new ArrayList<Integer>();
			for (int num : path) {
				result.add(num);
			}
			results.add(result);
		} else {
			for (int i = 0; i < nums.length; ++i) {
				// 由于nums数组已经排序，即按照相同数字分了组
				// 下面这个循环保证了结果中相同的数字间只有一种选择次序
				while (i < nums.length - 1 && !used[i + 1] && nums[i] == nums[i + 1]) {
					++i;
				}
				if (!used[i]) {
					used[i] = true;
					path.add(nums[i]);

					dfs(nums, used, path);

					path.remove(path.size() - 1);
					used[i] = false;
				}
			}
		}
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
		boolean[] used = new boolean[nums.length];
		List<Integer> path = new ArrayList<Integer>();
		Arrays.sort(nums);// 排序
		dfs(nums, used, path);
		return results;
	}
}

方法三 使用nextPermutation函数
public class Solution {
	private void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}

	private void reverse(int[] nums, int begin, int end) {
		int i = begin, j = end;
		while (i < j) {
			swap(nums, i++, j--);
		}
	}

	private boolean nextPermutation(int[] nums) {// 返回是否还有下一个排列
		int i = nums.length - 2;
		for (; i >= 0 && nums[i] >= nums[i + 1]; --i);// 从后向前找到第一个减少的元素
		if (i == -1)
			return false;
		else {
			int j = nums.length - 1;
			for (; nums[j] <= nums[i]; --j);// 从后向前找到第一个比nums[i]大的数字，并将其与nums[i]交换
			swap(nums, i, j);
			reverse(nums, i + 1, nums.length - 1);// 把i位置后的数组逆序
			return true;
		}
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> results = new ArrayList<List<Integer>>();
		Arrays.sort(nums);
		do {
			List<Integer> result = new ArrayList<Integer>();
			for (int i = 0; i < nums.length; ++i) {
				result.add(nums[i]);
			}
			results.add(result);
		} while (nextPermutation(nums));
		return results;
	}
}