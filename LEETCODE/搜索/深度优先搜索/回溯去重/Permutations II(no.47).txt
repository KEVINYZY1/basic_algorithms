Given a collection of numbers that might contain duplicates, return all possible unique permutations.
For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

// 方法一 很慢
public class Solution {
	private List<List<Integer>> results = new ArrayList<List<Integer>>();
	private Set<String> hashSet = new HashSet<String>();// 用于去重

	private void dfs(int[] nums, boolean[] used, List<Integer> path, StringBuffer key) {
		if (path.size() == nums.length && !hashSet.contains(key.toString())) {
			List<Integer> result = new ArrayList<Integer>();
			for (int num : path) {
				result.add(num);
			}
			results.add(result);
			hashSet.add(key.toString());
		} else {
			for (int i = 0; i < nums.length; ++i) {
				if (!used[i]) {
					int oldLength = key.length();
					used[i] = true;
					path.add(nums[i]);
					key.append(nums[i]);

					dfs(nums, used, path, key);

					key.delete(oldLength, key.length());
					path.remove(path.size() - 1);
					used[i] = false;
				}
			}
		}
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
		boolean[] used = new boolean[nums.length];
		List<Integer> path = new ArrayList<Integer>();
		StringBuffer key = new StringBuffer();
		dfs(nums, used, path, key);
		return results;
	}
}

// 方法二 很快
public class Solution {
	private List<List<Integer>> results = new ArrayList<List<Integer>>();

	private void dfs(int[] nums, boolean[] used, List<Integer> path) {
		if (path.size() == nums.length) {
			List<Integer> result = new ArrayList<Integer>();
			for (int num : path) {
				result.add(num);
			}
			results.add(result);
		} else {
			for (int i = 0; i < nums.length; ++i) {
				// 由于nums数组已经排序，即按照相同数字分了组
				// 下面这个循环保证了结果中相同的数字间只有一种选择次序
				while (i < nums.length - 1 && !used[i + 1] && nums[i] == nums[i + 1]) {
					++i;
				}
				if (!used[i]) {
					used[i] = true;
					path.add(nums[i]);

					dfs(nums, used, path);

					path.remove(path.size() - 1);
					used[i] = false;
				}
			}
		}
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
		boolean[] used = new boolean[nums.length];
		List<Integer> path = new ArrayList<Integer>();
		Arrays.sort(nums);// 排序
		dfs(nums, used, path);
		return results;
	}
}

方法三 使用nextPermutation函数
public class Solution {
	private List<List<Integer>> results = new ArrayList<List<Integer>>();

	public void sort(int[] nums, int begin, int end) {
		int[] temp = new int[end - begin + 1];
		int j = 0;
		for (int i = begin; i <= end; ++i) {
			temp[j] = nums[i];
			++j;
		}
		Arrays.sort(temp);
		j = 0;
		for (int i = begin; i <= end; ++i) {
			nums[i] = temp[j];
			++j;
		}
	}

	public boolean nextPermutation(int[] nums) {
		int i;
		for (i = nums.length - 2; i >= 0; --i) {
			if (nums[i] < nums[i + 1]) {// 找到变小的那个数字nums[i]
				for (int j = nums.length - 1; j > i; --j) {
					if (nums[j] > nums[i]) {// 找到比变小的数字大的那个数字nums[j]
						int temp;
						temp = nums[j];
						nums[j] = nums[i];
						nums[i] = temp;// nums[i]和nums[j]交换位置
						sort(nums, i + 1, nums.length - 1);// 把i下标后面的部分升序排列
						break;
					}
				}
				break;
			}
		}
		if (i < 0) {
			return true;// 已经到了最后
		}
		List<Integer> result = new ArrayList<Integer>();
		for(int j = 0; j < nums.length; ++j) {
			result.add(nums[j]);
		}
		results.add(result);
		return false;
	}

	public List<List<Integer>> permuteUnique(int[] nums) {
	    
		Arrays.sort(nums);// 排序
		
		List<Integer> result = new ArrayList<Integer>();
		for(int j = 0; j < nums.length; ++j) {
			result.add(nums[j]);
		}
		results.add(result);// 加入第一个排列
		
		boolean finish = nextPermutation(nums);
		while(!finish) {
			finish = nextPermutation(nums);
		}
		return results;
	}
}