一个数据流，不知道数据流的长度，只能遍历一遍。返回数据流中任意一个元素，保证概率相等

思路：遍历数据流nums[]，数据流中数据的下标为i = 1,2,3.....
假设val是想要取得的元素值
在nums[i]处，以1/i的概率决定val是否更新为nums[i]
这样，假如有n个总元素，选择k号元素的概率是 1/k * (1-1/(k+1)) * (1-1/(k+2)) * ... * (1-1/(n)) = 1/n

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
	private ListNode head;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        this.head = head;
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
    	int idx = 1;
    	int result = head.val;
        for(ListNode ptr = head; ptr != null; ptr = ptr.next) {
        	int rand = (int)(Math.random() * idx);
        	if(rand == 0) {
        		result = ptr.val;
        	}
        	++idx;
        }
        return result;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */