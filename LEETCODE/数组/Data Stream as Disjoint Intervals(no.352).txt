Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class SummaryRanges {
    private Map<Integer, Integer[]> segmentBeginMap = new HashMap<Integer, Integer[]>();// value中[0]是区间起始，[1]是区间截止
    private Map<Integer, Integer[]> segmentEndMap = new HashMap<Integer, Integer[]>();
    private Set<Integer> elements = new HashSet<Integer>();
    /** Initialize your data structure here. */
    public SummaryRanges() {
        
    }
    
    public void addNum(int val) {
        if(elements.contains(val)) {// 已经存在这个元素了
            return;
        }
        elements.add(val);
        int left = val - 1;
        int right = val + 1;
        if(segmentBeginMap.containsKey(right) && segmentEndMap.containsKey(left)) { // ----0----
            Integer[] right_part = segmentBeginMap.get(right);// val右边邻接的区间
            segmentBeginMap.remove(right);
            Integer[] left_part = segmentEndMap.get(left);// val左边邻接的区间
            segmentEndMap.remove(left);
            
            (segmentBeginMap.get(left_part[0]))[1] = right_part[1];
            (segmentEndMap.get(right_part[1]))[0] = left_part[0];
        } else if(segmentBeginMap.containsKey(right)) {// 0----
            Integer[] right_part = segmentBeginMap.get(right);
            segmentBeginMap.remove(right);
            
            Integer[] interval = {val, right_part[1]};
            segmentBeginMap.put(val, interval);
            (segmentEndMap.get(right_part[1]))[0] = val;
        } else if(segmentEndMap.containsKey(left)) {// ----0
            Integer[] left_part = segmentEndMap.get(left);
            segmentEndMap.remove(left);
            
            Integer[] interval = {left_part[0], val};
            segmentEndMap.put(val, interval);
            (segmentBeginMap.get(left_part[0]))[1] = val;
        } else {
            Integer[] interval1 = {val, val};
            Integer[] interval2 = {val, val};
            segmentBeginMap.put(val, interval1);
            segmentEndMap.put(val, interval2);
        }
    }
    
    
    class IntervalComparator implements Comparator<Interval> {
        public int compare(Interval i1, Interval i2) {
            return i1.start - i2.start;
        }
    }
    
    public List<Interval> getIntervals() {
        List<Interval> result = new ArrayList<Interval>();
        for(Integer begin : segmentBeginMap.keySet()) {
            Integer[] interval = segmentBeginMap.get(begin);
            result.add(new Interval(interval[0], interval[1]));
        }
        Collections.sort(result, new IntervalComparator());
        return result;
    }
}