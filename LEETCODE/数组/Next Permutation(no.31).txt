Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
public class Solution {
	public void sort(int[] nums, int begin, int end) {
		int[] temp = new int[end - begin + 1];
		int j = 0;
		for (int i = begin; i <= end; ++i) {
			temp[j] = nums[i];
			++j;
		}
		Arrays.sort(temp);
		j = 0;
		for (int i = begin; i <= end; ++i) {
			nums[i] = temp[j];
			++j;
		}
	}

	public void nextPermutation(int[] nums) {
		int i;
		for (i = nums.length - 2; i >= 0; --i) {
			if (nums[i] < nums[i + 1]) {// 找到变小的那个数字nums[i]
				for (int j = nums.length - 1; j > i; --j) {
					if (nums[j] > nums[i]) {// 找到比变小的数字大的那个数字nums[j]
						int temp;
						temp = nums[j];
						nums[j] = nums[i];
						nums[i] = temp;// nums[i]和nums[j]交换位置
						sort(nums, i + 1, nums.length - 1);// 把i下标后面的部分升序排列
						break;
					}
				}
				break;
			}
		}
		if (i < 0) {
			sort(nums, 0, nums.length - 1);
		}
	}
}