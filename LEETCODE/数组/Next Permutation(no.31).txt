Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
public class Solution {
	private void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}

	private void reverse(int[] nums, int begin, int end) {
		int i = begin, j = end;
		while (i < j) {
			swap(nums, i++, j--);
		}
	}

	public void nextPermutation(int[] nums) {
		// 从后向前找到第一个减小的元素
		int i = nums.length - 2;
		for (; i >= 0 && nums[i] >= nums[i + 1]; --i);
		if (i == -1) {
			reverse(nums, 0, nums.length - 1);
		} else {
			// 从后向前找第一个大于nums[i]的元素nums[j]，并交换nums[i]和nums[j]
			int j = nums.length - 1;
			for (; nums[j] <= nums[i]; --j);
			swap(nums, i, j);
			reverse(nums, i + 1, nums.length - 1);// 把i后面的数组翻转
		}
	}
}