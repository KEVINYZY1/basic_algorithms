Shuffle a set of numbers without duplicates.

public class Solution {
    private int[] originNums;
    public Solution(int[] nums) {
        this.originNums = new int[nums.length];
        for(int i = 0; i < nums.length; ++i) {
            originNums[i] = nums[i];
        }
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        int[] nums = new int[originNums.length];
        for(int i = 0; i < originNums.length; ++i) {
            nums[i] = originNums[i];
        }
        return nums;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        int[] result = new int[originNums.length];
        List<Integer> freeList = new ArrayList<Integer>();// 里面存放shuffle后数组空闲区域的下标
        for(int i = 0; i < originNums.length; ++i) {
            freeList.add(i);
        }
        for(int i = 0; i < originNums.length; ++i) {
            int value = originNums[i];// 得到一个值
            int freeListIdx = (int)(Math.random() * freeList.size());
            int idx = freeList.get(freeListIdx);// 决定这个值应该放在result数组的哪里
            result[idx] = value;
            freeList.remove(freeListIdx);
        }
        return result;
    }
}