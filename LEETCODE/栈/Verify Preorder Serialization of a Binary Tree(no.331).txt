One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false


public class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] tokensList = preorder.split(",");
        String[] stack = new String[tokensList.length];
        int ptr = 0;
        for(int i = 0; i < tokensList.length; ++i) {
            String token = tokensList[i];
            stack[ptr] = token; ++ptr;// 压栈
            while(ptr >= 3 && stack[ptr - 1].equals("#") && stack[ptr - 2].equals("#") && !stack[ptr - 3].equals("#")) {
                // 说明栈顶倒数第三个元素t为根的子树访问完了
                ptr = ptr - 3;
                stack[ptr] = "#";
                ++ptr;// t以及其左右子树#出栈，然后把#压入栈
            }
            
        }
        if(ptr == 1 && stack[ptr - 1].equals("#")) return true;
        return false;
    }
}