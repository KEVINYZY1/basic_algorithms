public class Solution {
	public int largestRectangleArea(int[] heights) {
		Stack<Integer> stack = new Stack<Integer>();// 单调递增的栈
		Stack<Integer> stack2 = new Stack<Integer>();// 记录每个矩形吸收的周围矩形数目（包括自己）
		int max = 0;// 最终结果
		for (int i = 0; i <= heights.length; ++i) {
			int h = i == heights.length ? 0 : heights[i];
			int counter = 0;// 统计当前矩形可以吸收的矩形数目（包括自己）
			while (!stack.isEmpty() && stack.peek() > h) {// 出栈循环
				// 每次出栈计算以出栈矩形为高度的最大矩形
				int temp = stack.pop();
				counter += stack2.pop();
				max = Math.max(max, temp * counter);
			}
			stack.push(h);
			stack2.push(counter + 1);
		}
		return max;
	}
}