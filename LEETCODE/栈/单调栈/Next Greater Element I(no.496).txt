You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]

Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]

public class Solution {
    public int[] nextGreaterElement(int[] findNums, int[] nums) {
        int[] result = new int[findNums.length];
        if(nums.length == 0) return result;
        
        Map<Integer, Integer> value_idx = new HashMap<Integer, Integer>();// 记录每个元素在nums中的位置
        for(int i = 0; i < nums.length; ++i) {
            value_idx.put(nums[i], i);
        }
        // 计算nums每个数字的下一个更大的数
        int[] nextGreater = new int[nums.length];
        Stack<Integer> stack = new Stack<Integer>();// 栈中指针指向的元素维持单调递减
        stack.push(0);
        for(int i = 1; i < nums.length; ++i) {
            while(!stack.isEmpty() && nums[i] > nums[stack.peek()]) {// nums[i]就是栈中小于nums[i]的元素的next greater element
                int ptr = stack.pop();
                nextGreater[ptr] = nums[i];
            }
            stack.push(i);
        }
        
        while(!stack.isEmpty()) {// 处理下一个更大元素不存在的元素
            nextGreater[stack.pop()] = -1;
        }
        
        
        for(int i = 0; i < findNums.length; ++i) {
            result[i] = nextGreater[value_idx.get(findNums[i])];
        }
        
        return result;
    }
}