public class Solution {
	public int trap(int[] heights) {
		Stack<Integer> stack = new Stack<Integer>();// 单调递减的栈
		Stack<Integer> stack2 = new Stack<Integer>();// 存放每个元素吸收的周围元素数目（包括自己）
		int water = 0;// 总蓄水量
		int maxElement = 0;// stack栈中的最大元素（栈底元素）
		for (int i = 0; i < heights.length; ++i) {
			int h = heights[i];
			int counter = 0;// 记录当前元素吸收的左边元素数目
			while (!stack.isEmpty() && h > stack.peek()) {// 出栈循环
				int temp = stack.pop();
				int width = stack2.pop();
				water += width * (Math.min(maxElement, h) - temp);// 记录装的水
				counter += width;
			}
			stack.push(h);
			stack2.push(counter + 1);
			maxElement = Math.max(maxElement, h);
		}
		return water;
	}
}