Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.

Example 1:
nums = [1, 3], n = 6
Return 1.

Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2:
nums = [1, 5, 10], n = 20
Return 2.
The two patches can be [2, 4].

Example 3:
nums = [1, 2, 2], n = 5
Return 0.

public class Solution {
    public int minPatches(int[] nums, int n) {
        Arrays.sort(nums);// nums是原始的数列，数字从小到大排列
        List<Long> result = new ArrayList<Long>();
        long nextExpectNum = 1;// 表示到nums[i]为止的数可以表示的连续数字之后的下一个连续数字
        int numsIdx = 0;
        while(nextExpectNum <= n) {
            int num = numsIdx >= nums.length ? Integer.MAX_VALUE : nums[numsIdx];// nums[i]处的数字
            if(num <= nextExpectNum) {// 可以把连续数字范围扩大
                nextExpectNum = (long)num + nextExpectNum;
                ++numsIdx;
            } else {// 无法把连续数字范围扩大
                result.add(nextExpectNum);// 这样可以把连续数字范围尽可能扩大
                nextExpectNum = nextExpectNum + nextExpectNum;
            }
        }
        return result.size();
    }
}