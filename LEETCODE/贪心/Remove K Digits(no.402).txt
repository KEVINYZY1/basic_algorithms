Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

public class Solution {
    public String removeKdigits(String num, int k) {
        // 实际上就是找出num.length() - k个数字，保证结果最小
        if(k == num.length()) {
        	return "0";
        }

        int resultLength = num.length() - k;
        StringBuffer result = new StringBuffer();
        int begin = 0;
        int end = num.length() - resultLength;// 确定result的每一位数字时在num中搜索的范围
        for(int i = 0; i < resultLength; ++i) {// 确定result的每一位
        	char min = '9' + 1;
        	int idx = 0;
        	for(int j = begin; j <= end; ++j) {// 在搜索范围中找最小的数字
        		if(min > num.charAt(j)) {
        			min = num.charAt(j);
        			idx = j;
        		}
        	}
        	result.append(num.charAt(idx));
        	// 更新begin, end
        	begin = idx + 1;
        	++end;
        }
        while(result.length() != 0 && result.charAt(0) == '0') {
        	result.deleteCharAt(0);
        }
        if(result.length() == 0) return "0";
        return result.toString();
    }
}