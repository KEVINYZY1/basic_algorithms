public class Main {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		while(scanner.hasNext()) {
			String[] nums = scanner.nextLine().split(" ");
			int row = Integer.parseInt(nums[0]);
			int col = Integer.parseInt(nums[1]);
			int[][] map = new int[row][col];
			
			for (int i = 0; i < row; ++i) {
				String s = scanner.nextLine();
				for (int j = 0; j < col; ++j) {
					map[i][j] = s.charAt(j) == '.' ? 0 : 1;
				}
			}

			// dp[i][j][0]记录机器人走到map[i][j]向右走需要改变的最小次数，dp[i][j][1]表示机器人走到map[i][j]向下走需要改变的最小次数
			// change = (根据上一次的方向, 当前位置的方向, 周围的砖块)得到应该修改的次数
			// dp[i][j][0] = min(dp[i][j-1][0] + change0, dp[i-1][j][1] + change1)
			// dp[i][j][1] = min(dp[i][j-1][0] + change2, dp[i-1][j][1] + change3)
			int[][][] dp = new int[row][col][2];
			int right_block = 1 == col ? 1 : (map[0][1] == 1 ? 1 : 0);
			int down_block = 1 == row ? 1 : (map[1][0] == 1 ? 1 : 0);
			dp[0][0][0] = right_block;
			dp[0][0][1] = (1 - right_block) + down_block;
			for (int j = 1; j < col; ++j) {// 初始化第一行
				right_block = j + 1 == col ? 1 : (map[0][j + 1] == 1 ? 1 : 0);// 判断右边是否有障碍,1有0没有
				down_block = 1 == row ? 1 : (map[1][j] == 1 ? 1 : 0);// 判断下面是否有障碍
				dp[0][j][0] = dp[0][j - 1][0] + right_block;
				dp[0][j][1] = dp[0][j - 1][0] + (1 - right_block) + down_block;
			}
			for (int i = 1; i < row; ++i) {// 初始化第一列
				right_block = 1 == col ? 1 : (map[i][1] == 1 ? 1 : 0);
				down_block = i + 1 == row ? 1 : (map[i + 1][0] == 1 ? 1 : 0);
				dp[i][0][0] = dp[i - 1][0][1] + (1 - down_block) + right_block;
				dp[i][0][1] = dp[i - 1][0][1] + down_block;
			}

			// dp过程
			for (int i = 1; i < row; ++i) {
				for (int j = 1; j < col; ++j) {
					right_block = j + 1 == col ? 1 : (map[i][j + 1] == 1 ? 1 : 0);
					down_block = i + 1 == row ? 1 : (map[i + 1][j] == 1 ? 1 : 0);
					int change0 = 0, change1 = 0, change2 = 0, change3 = 0;
					change0 = right_block;// 之前向右，现在向右
					change1 = (1 - down_block) + right_block;// 之前向下，现在向右
					change2 = (1 - right_block) + down_block;// 之前向右，现在向下
					change3 = down_block;// 之前向下，现在向下
					dp[i][j][0] = Math.min(dp[i][j - 1][0] + change0, dp[i - 1][j][1] + change1);
					dp[i][j][1] = Math.min(dp[i][j - 1][0] + change2, dp[i - 1][j][1] + change3);
				}
			}
			System.out.println(Math.min(dp[row - 1][col - 1][0], dp[row - 1][col - 1][1]) - 1);
		}
	}
}