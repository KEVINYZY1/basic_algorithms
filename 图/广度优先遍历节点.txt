public class Graph {
	public ArrayList<HashSet<Integer>> adjTable = new ArrayList<HashSet<Integer>>();// 构造的是出度邻接表

	public Graph(int pointNum, int[][] pairs) {// 输入点对，边的方向是从pairs[][0]到pairs[][1]
		for (int i = 0; i < pointNum; ++i) {
			adjTable.add(new HashSet<Integer>());
		} // 初始化邻接表
		for (int i = 0; i < pairs.length; ++i) {
			adjTable.get(pairs[i][0]).add(pairs[i][1]);
		}
	}

	public void BFS() {
		Queue<Integer> queue = new LinkedList<Integer>();// 广度优先用队列
		ArrayList<Integer> color = new ArrayList<Integer>();// 颜色数组：0是白色，1是灰色，2是黑色
		Boolean finishTraversal = false;
		// 白色表示该节点没有访问过；灰色表示访问了，但是它的孩子没访问完；黑色是这个节点和它的孩子节点都访问完了
		for (int i = 0; i < adjTable.size(); ++i) {
			color.add(0);
		}
		while (!finishTraversal) {
			int begin = -1;
			for (int i = 0; i < color.size(); ++i) {
				if (color.get(i) == 0) {
					begin = i;
					break;
				}
			} // 寻找一个没有遍历过的点
			if (begin != -1) {
				queue.offer(begin);
				color.set(begin, 1);
				while (!queue.isEmpty()) {
					int now = queue.poll();
					System.out.println(now);// 输出当前节点
					for (Integer child : adjTable.get(now)) {
						if (color.get(child) == 0) {// 这个孩子还没有访问过
							queue.offer(child);
							color.set(child, 1);// 设置已经访问过这个节点
						}
					}
					color.set(now, 2);// 当前节点的孩子节点都访问完了
				}
			} else {
				finishTraversal = true;
			}
		}
	}
}