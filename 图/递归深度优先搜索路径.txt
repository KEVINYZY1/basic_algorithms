public class Graph {
	public ArrayList<HashSet<Integer>> adjTable = new ArrayList<HashSet<Integer>>();// 构造的是出度邻接表

	public Graph(int pointNum, int[][] pairs) {// 输入点对，边的方向是从pairs[][0]到pairs[][1]
		for (int i = 0; i < pointNum; ++i) {
			adjTable.add(new HashSet<Integer>());
		} // 初始化邻接表
		for (int i = 0; i < pairs.length; ++i) {
			adjTable.get(pairs[i][0]).add(pairs[i][1]);
		}
	}

	public void searchPath(int now, ArrayList<Integer> path, HashSet<Integer> pathSet) {
		path.add(now);
		pathSet.add(now);
		boolean pathEnd = true;// 默认该路径不可以向下搜索
		for (int child : adjTable.get(now)) {
			if (!pathSet.contains(child)) {// 这个点没有在路径中出现过（防止成环）
				pathEnd = false;// 该路径还可以向下搜索
				searchPath(child, path, pathSet);
			}
		}
		if (pathEnd == true) {// 这条路径已经搜索完毕，输出结果
			for (int i = 0; i < path.size(); ++i) {
				System.out.print(path.get(i) + " ");
			}
			System.out.println();
		}
		path.remove(path.size() - 1);
		pathSet.remove(now);
	}
}